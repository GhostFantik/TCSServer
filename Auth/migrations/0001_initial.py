# Generated by Django 3.1.6 on 2021-03-11 17:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Core', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('third_name', models.CharField(blank=True, max_length=100, verbose_name='Отчество')),
                ('role', models.CharField(choices=[('D', 'Driver'), ('M', 'Mechanic'), ('A', 'Admin'), ('C', 'Car')], max_length=10, verbose_name='Роль')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Core.company')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Mechanic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('others', models.TextField(blank=True, verbose_name='Другое')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Механик',
                'verbose_name_plural': 'Механики',
                'db_table': 'mechanics',
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license', models.CharField(max_length=10, verbose_name='ВУ')),
                ('others', models.TextField(blank=True, verbose_name='Другое')),
                ('date_license', models.DateField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Водитель',
                'verbose_name_plural': 'Водители',
                'db_table': 'drivers',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.CharField(max_length=255, verbose_name='Марка')),
                ('model', models.CharField(max_length=255, verbose_name='Модель')),
                ('vin', models.CharField(max_length=17, verbose_name='VIN')),
                ('year', models.DateField(verbose_name='Год')),
                ('color', models.CharField(blank=True, max_length=20, verbose_name='Цвет')),
                ('ctc', models.CharField(blank=True, max_length=10, verbose_name='СТС')),
                ('ptc', models.CharField(blank=True, max_length=15, verbose_name='ПТС')),
                ('owner', models.CharField(blank=True, max_length=100, verbose_name='Собственник')),
                ('mileage', models.PositiveIntegerField(verbose_name='Пробег (км)')),
                ('to1', models.PositiveIntegerField(blank=True, null=True, verbose_name='ТО1')),
                ('to2', models.PositiveIntegerField(blank=True, null=True, verbose_name='ТО2')),
                ('engine', models.CharField(blank=True, max_length=50, null=True, verbose_name='Двигатель')),
                ('power_engine', models.CharField(blank=True, max_length=3, null=True, verbose_name='Мощность двигателя')),
                ('type_engine', models.CharField(choices=[('P', 'Бензин'), ('G', 'Газовый'), ('D', 'Дизель'), ('E', 'Электрический')], max_length=5, verbose_name='Тип двигателя')),
                ('env_class', models.CharField(choices=[('3', '3'), ('4', '4'), ('5', '5'), ('6', '6')], max_length=5, verbose_name='Экологический класс')),
                ('osago', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер полиса ОСАГО')),
                ('osago_validity', models.DateField(blank=True, null=True, verbose_name='Срок действия ОСАГО')),
                ('diagnostic_card', models.CharField(blank=True, max_length=50, null=True, verbose_name='Диагностическая карта')),
                ('diagnostic_card_validity', models.DateField(blank=True, null=True, verbose_name='Срок действия техосмотра')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Машина',
                'verbose_name_plural': 'Машины',
                'db_table': 'cars',
            },
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'admins',
            },
        ),
    ]
